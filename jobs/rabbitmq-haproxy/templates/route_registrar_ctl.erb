#!/bin/bash
set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

JOB_NAME=${2}-route-registrar

RUN_DIR=/var/vcap/sys/run/${2}-route-registrar
LOG_DIR=/var/vcap/sys/log/${2}-route-registrar
PIDFILE=$RUN_DIR/${2}-route-registrar.pid

pid_guard() {
  PIDFILE=$1
  NAME=$2

  if [ -f "$PIDFILE" ]; then
    PID=$(head -1 "$PIDFILE")

    if [ -n "$PID" ] && [ -e /proc/$PID ]; then
      echo "$NAME is already running, please stop it first"
      exit 1
    fi

    echo "Removing stale pidfile..."
    rm $PIDFILE
  fi
}

wait_pid() {
  PID=$1
  TRY_KILL=$2
  TIMEOUT=${3:-0}
  FORCE=${4:-0}
  COUNTDOWN=$(( $TIMEOUT * 10 ))

  echo wait_pid $PID $TRY_KILL $TIMEOUT $FORCE $COUNTDOWN
  if [ -e /proc/$PID ]; then
    if [ "$TRY_KILL" = "1" ]; then
      echo "Killing $PIDFILE: $PID "
      kill $PID
    fi
    while [ -e /proc/$PID ]; do
      sleep 0.1
      [ "$COUNTDOWN" != '0' -a $(( $COUNTDOWN % 10 )) = '0' ] && echo -n .
      if [ $TIMEOUT -gt 0 ]; then
        if [ $COUNTDOWN -eq 0 ]; then
          if [ "$FORCE" = "1" ]; then
            echo -ne "\nKill timed out, using kill -9 on $PID... "
            kill -9 $PID
            sleep 0.5
          fi
          break
        else
          COUNTDOWN=$(( $COUNTDOWN - 1 ))
        fi
      fi
    done
    if [ -e /proc/$PID ]; then
      echo "Timed Out"
    else
      echo "Stopped"
    fi
  else
    echo "Process $PID is not running"
    echo "Attempting to kill pid anyway..."
    kill $PID
  fi
}

wait_pidfile() {
  PIDFILE=$1
  TRY_KILL=$2
  TIMEOUT=${3:-0}
  FORCE=${4:-0}
  COUNTDOWN=$(( $TIMEOUT * 10 ))

  if [ -f "$PIDFILE" ]; then
    PID=$(head -1 "$PIDFILE")
    if [ -z "$PID" ]; then
      echo "Unable to get pid from $PIDFILE"
      exit 1
    fi

    wait_pid $PID $TRY_KILL $TIMEOUT $FORCE

    rm -f $PIDFILE
  else
    echo "Pidfile $PIDFILE doesn't exist"
  fi
}

kill_and_wait() {
  PIDFILE=$1
  # Monit default timeout for start/stop is 30s
  # Append 'with timeout {n} seconds' to monit start/stop program configs
  TIMEOUT=${2:-25}
  FORCE=${3:-1}
  if [[ -f ${PIDFILE} ]]
  then
    wait_pidfile $PIDFILE 1 $TIMEOUT $FORCE
  else
    # TODO assume $1 is something to grep from 'ps ax'
    PID="$(ps auwwx | grep "$1" | awk '{print $2}')"
    wait_pid $PID 1 $TIMEOUT $FORCE
  fi
}

case $1 in
start)
  mkdir -p $RUN_DIR
  mkdir -p $LOG_DIR
  chown vcap:vcap $LOG_DIR
  /usr/sbin/service rsyslog restart

  pid_guard $PIDFILE $JOB_NAME
  echo $$ > $PIDFILE

  # Need to be in the right directory
  cd /var/vcap/packages/route-registrar

  exec chpst -u vcap:vcap /var/vcap/packages/route-registrar/route-registrar \
    -configPath /var/vcap/jobs/rabbitmq-haproxy/config/${2}_registrar_settings.yml \
    >>$LOG_DIR/route-registrar.stdout.log
    2>>$LOG_DIR/route-registrar.stderr.log
;;

stop)
  kill_and_wait $PIDFILE
;;

esac
exit 0
