#!/usr/bin/env bash

set -e # bail out early if any command fails
set -o pipefail # fail if any component of any pipe fails

[[ -z "${DEBUG:-""}" ]] || set -x

# shellcheck disable=SC2128
if [[ "$0" = "$BASH_SOURCE" ]]; then
  # only run, when called and not sourced
  . /var/vcap/jobs/rabbitmq-server/lib/rabbitmq-config-vars.bash

  # Unfortunate tight coupling. Beware.
  # We need this for CONF_ENV_FILE, HOME, ERL_INETRC, and for MNESIA_BASE
  . /var/vcap/packages/rabbitmq-server/privbin/rabbitmq-defaults
fi

HOME_DIR="/var/vcap/store/rabbitmq"
RABBITMQ_ADVANCED_CONFIG_FILE="/var/vcap/jobs/rabbitmq-server/etc/advanced.config"
RABBITMQ_INTERNODE_TLS_CONFIG_FILE="/var/vcap/jobs/rabbitmq-server/etc/inter_node_tls.config"
RABBITMQ_CONFIG_FILE_REGEX="/var/vcap/jobs/rabbitmq-server/etc/conf.d/*.conf"
RABBITMQ_MNESIA_BASE="$HOME_DIR/mnesia"
RABBITMQ_MNESIA_DIR="$RABBITMQ_MNESIA_BASE/db"
RABBITMQ_PLUGINS_EXPAND_DIR="$RABBITMQ_MNESIA_BASE/db-plugins-expand"
RABBITMQ_BOOT_MODULE="RABBITMQ_BOOT_MODULE=rabbit"
UPGRADE_PREPARATION_NODES_FILE="/var/vcap/data/upgrade_preparation_nodes"
VCAP_HOME=${VCAP_HOME:-${HOME}}
VCAP_USER=${VCAP_USER:-vcap}
VCAP_GROUP=${VCAP_GROUP:-vcap}

main(){
  create_env_config_file \
    "$CONF_ENV_FILE" \
    "$SELF_NODE" \
    "$DIR" \
    "$ENABLED_PLUGINS_FILE" \
    "$USE_LONGNAME" \
    "$INTER_NODE_TLS"

  prepare_for_upgrade "$RABBITMQ_NODES_STRING" "$UPGRADE_PREPARATION_NODES_FILE"

  create_erlang_cookie "$DIR" "$ERLANG_COOKIE" "$VCAP_HOME" "$VCAP_USER" "$VCAP_GROUP"
}

escape_for_singlequoted_string() {
  # https://stackoverflow.com/a/1250279
  sed "s/'/'\"'\"'/g"
}

create_env_config_file() {
  local conf_env_file self_node dir nodename prefix suffix plugins_file use_longname inter_node_tls
  conf_env_file="$1"
  self_node="$2"
  dir="$3"
  plugins_file="$4"
  use_longname="$5"
  inter_node_tls="$6"
  prefix='### AUTOGENERATED BY RABBITMQ CLUSTERING - DO NOT EDIT BELOW ###'
  suffix='### AUTOGENERATED BY RABBITMQ CLUSTERING - DO NOT EDIT ABOVE ###'
  nodename="NODENAME='$self_node'"
  rabbitmq_nodename="RABBITMQ_NODENAME='$self_node'"

  if [[ "$conf_env_file" != " " ]] && [[ -f "$conf_env_file" ]]; then
    cp "$conf_env_file" "$dir/env.backup"
  else
    printf '' > "$dir/env.backup"
  fi

  sed "/$prefix/,/$suffix/d" < "$dir/env.backup" > "$dir/env"

  printf "%s\n" "$prefix" >> "$dir/env"
  printf "%s\n" "$nodename" >> "$dir/env"
  printf "%s\n" "$rabbitmq_nodename" >> "$dir/env"
  printf "%s\n" "$RABBITMQ_BOOT_MODULE" >> "$dir/env"

  printf "CONFIG_FILES=%s\n" "$RABBITMQ_CONFIG_FILE_REGEX" >> "$dir/env"
  printf "ADVANCED_CONFIG_FILE=%s\n" "$RABBITMQ_ADVANCED_CONFIG_FILE" >> "$dir/env"

  # set custom RabbitMQ db / plugin directory not specifying the node name
  printf "RABBITMQ_MNESIA_DIR=%s\n" "$RABBITMQ_MNESIA_DIR" >> "$dir/env"
  printf "RABBITMQ_PLUGINS_EXPAND_DIR=%s\n" "$RABBITMQ_PLUGINS_EXPAND_DIR" >> "$dir/env"
  printf "ENABLED_PLUGINS_FILE=%s\n" "$plugins_file" >> "$dir/env"
  printf "USE_LONGNAME=%s\n" "$use_longname" >> "$dir/env"
  printf "SERVER_START_ARGS='%s'\n" "-mnesia core_dir \"/var/vcap/sys/log/rabbitmq-server\" -rabbit halt_on_upgrade_failure false" >> "$dir/env"

  if [[ "$inter_node_tls" == "true" ]]; then
    printf "SERVER_ADDITIONAL_ERL_ARGS=\"-proto_dist inet_tls -ssl_dist_optfile %s\"\n" "$RABBITMQ_INTERNODE_TLS_CONFIG_FILE" >> "$dir/env"
    printf "CTL_ERL_ARGS=\"-proto_dist inet_tls -ssl_dist_optfile %s\"\n" "$RABBITMQ_INTERNODE_TLS_CONFIG_FILE" >> "$dir/env"
  fi

  printf "%s\n" "$suffix" >> "$dir/env"

  if [[ "$conf_env_file" != "" ]]; then
    cp "$dir/env" "$conf_env_file"
  fi
}

prepare_for_upgrade() {
  local rabbitmq_nodes nodes_file

  rabbitmq_nodes="$1"
  nodes_file="${2:-/var/vcap/data/upgrade_preparation_nodes}"

  rm -f "$nodes_file"

  OLD_IFS="$IFS"
  IFS=","
  for node in $rabbitmq_nodes; do
    echo "$node" >> "$nodes_file"
  done
  IFS="$OLD_IFS"
}

create_erlang_cookie() {
  local dir erlang_cookie home user group

  dir="$1"
  erlang_cookie="$2"
  home="$3"
  user="$4"
  group="$5"

  echo -n "$erlang_cookie" > "$dir/.erlang.cookie"
  chown "$user":"$group" "$dir/.erlang.cookie"
  chmod 0400 "$dir/.erlang.cookie"
  cp -a "$dir/.erlang.cookie" "$home"
}

# shellcheck disable=SC2128
if [[ "$0" = "$BASH_SOURCE" ]]; then
  main
fi

